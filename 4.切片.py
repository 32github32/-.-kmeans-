#——————————————————————————————————————————————————————————————————————————————————
#在Python中，切片是指从序列（如列表、元组、字符串等）中获取子序列的操作。
#通过指定开始位置、结束位置和步长，你可以使用切片来创建一个新的序列，其中包含原始序列的部分元素。

#例如，对于一个列表 
my_list = [0, 1, 2, 3, 4, 5]      #你可以使用切片操作来获取其中的子序列。比如，
my_list[1:4] 将返回 [1, 2, 3]      #这表示从索引1（包含）到索引4（不包含）的元素构成的子列表。

#切片操作的一般形式是 start:end:step，
#其中 start 是起始位置（包含），
#end 是结束位置（不包含），
#step 是步长（默认为1）。

#如果未指定 start，则默认为序列的开头；
#如果未指定 end，则默认为序列的结尾；
#如果未指定 step，则默认为1。

#————————————————————————————————————————————————————————————————————————————
# python  
import numpy as np

arr = np.array([[1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]])

result = arr[:, 0]
print(result)

#在这个例子中，我们有一个3x3的二维数组arr。
#当我们执行arr[:, 0]时，它将返回数组arr的第一列，即包含元素1, 4, 7的一维数组。因此，上述代码将输出：

#[1 4 7]  得出一个数字

#—————————————————————————————————————————————————————————————————————————————————

import numpy as np

arr = np.array([[1, 2, 3, 4, 5],
                [6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15]])

result = arr[:, :4]
print(result)
#在这个例子中，我们有一个3x5的二维数组arr。
#当我们执行arr[:, :4]时，它将返回数组arr的前四列，即包含每行的前4个元素的二维数组。因此，上述代码将输出：
'''
[[ 1  2  3  4]
 [ 6  7  8  9]
 [11 12 13 14]]
得出三个数组
'''






















